#
# Copyright (c) SAS Institute Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

from conary.lib import log

loadSuperClass('group-appliance=centos6.rpath.com@rpath:centos-6e')
class GroupDevimageAppliance(ApplianceGroupRecipe):
    name = 'group-devimage-appliance'
    version = 'tip'

    def addPackages(r):
        # Replace conary
        r.replace('conary')
        r.add('conary-build')
        r.add('conary-repository')
        r.add('conary-policy')

        # Basic system tools
        r.add('file')
        r.add('keyutils')
        r.add('less')
        r.add('nfs-utils')
        r.add('openssh-clients')
        r.add('openssh-server')
        r.add('rsync')
        r.add('strace')
        r.add('tcpdump')
        r.add('wget')
        r.add('which')
        r.add('dstat')
        r.add('man')
        r.add('tar')
        r.add('unzip')
        r.add('zip')

        # Login support and monitoring
        r.add('krb5-workstation')
        r.add('lsof')
        r.add('net-snmp')
        r.add('patch')
        r.add('rdiff-backup')
        r.add('screen')
        r.add('sudo')
        r.add('ypbind')
        r.add('yp-tools')

        r.add('rmake')
        r.add('rbuild')
        r.add('robj')
        r.add('xobj')
        r.add('python-keyutils')
        r.add('python-reportlab') # provides sgmlop, which makes rmake xmlrpc work better
        r.add('rpath-product-definition')

        r.add('entsrv-rbuild')

        r.add('python-simplejson')
        r.add('xz')
        r.add('lua')

        r.add('make')
        r.add('sudo')
        r.add('xmlto')

        r.add('mercurial')
        r.add('git')
        r.add('subversion')
        r.add('cvs')

        r.add('distro-policy')
        r.add('glibc-devel')
        r.add('glibc-headers')
        r.add('python-devel')
        r.add('python-setuptools')
        r.add('gcc')
        r.add('binutils')
        r.add('curl')

        r.add('tag-cacheable-font:tagdescription')
        r.add('tag-desktop-file:tagdescription')
        r.add('tag-gdk-pixbuf-loader:tagdescription')
        r.add('tag-gtk-input-method:tagdescription')
        r.add('tag-gtk-update-icon-cache:tagdescription')
        r.add('tag-info-file:tagdescription')
        r.add('tag-mime-database:tagdescription')
        r.add('tag-pangomodule:tagdescription')
        r.add('tag-shell:tagdescription')
        r.add('tag-usergroup-info')

        # Mirrorball Deps
        r.add('rpath-xmllib')
        r.add('python-dateutil')
        r.add('epdb')

        # Include a couple of common text editors for developers
        r.add('vim-enhanced')
        r.add('nano')

        # Add nscd to make performance better
        r.add('nscd')

        # Add devimage-specific customizations, such as an /etc/skel setup
        r.add('devimage-custom')

        r.addAll('group-rpm')
        r.addPostInstallScript(contents="""#!/bin/sh
/sbin/chkconfig rmake off
""")

    def getAdditionalSearchPath(r):
        """
        Set a package search path from a plethora of macros. This covers all
        the product components and dependencies that aren't part of the
        platform, e.g. everything except rPA, rPL, and rLS.
        """
        # Place new packages in the correct section, sorted alphabetically.
        packageSearchPath = []
        for macro, packages in [
                # rBuilder components from the build label
                ('buildlabel', [
                        'devimage-custom',
                      ]),
                ('master_label', [
                        'conary',
                        'conary-build',
                        'conary-policy',
                        'conary-repository',
                        'rbuild',
                        'rmake',
                        'entsrv-client',
                        'entsrv-rbuild',
                      ]),
                ('base_label', [
                        'pyovf',
                        'robj',
                        'xobj',
                        'smartform',
                        'rpath-job',
                        'rpath-models',
                        'rpath-product-definition',
                        'rpath-xmllib',
                      ]),

                # Other components
                ('rpm_label',               ['group-rpm']),

                # Platform overrides/extras
                ('contrib_label', [
                    ]),
              ]:
            if macro not in r.macros:
                continue
            for package in packages:
                pkgVersion = r.macros.get(macro, '')
                if '[' in package:
                    x = package.index('[')
                    package, flavor = package[:x], package[x:]
                    packageSearchPath.append('%s=%s%s' % (
                            package, pkgVersion, flavor))
                else:
                    packageSearchPath.append('%s=%s' % (package, pkgVersion))

        if not r._lightInstance:
            log.info("Package search path:")
            for entry in packageSearchPath:
                log.info(" %s", entry)
        return [packageSearchPath]

    def addrPathAppliancePlatformAgent(r):
        pass

    def getInitialSearchPath(r):
        return []

    def getAppliancePlatformSearchPath(r):
        """
        Derive a platform search path from some input macros, unless one
        was supplied in a rbuild-compatible form.
        """
        if 'productDefinitionSearchPath' in r.macros:
            path = r.macros.productDefinitionSearchPath.split('\n')
        else:
            path = [
                'group-os=%(distro_label)s' % r.macros,
                'group-rpath-packages=%(common_label)s' % r.macros,
              ]

        path.insert(0, 'group-rpath-platform=%s' % r.macros.platform_label)

        if not r._lightInstance:
            log.info("Platform search path:")
            for entry in path:
                log.info(" %s", entry)
        return path

    def setApplianceSearchPath(r):
        if 'searchPathOverride' in r.macros:
            path = r.macros.searchPathOverride.split('\n')
            r.setSearchPath(*path)

            # Set PDSP for addAppliancePlatform() to use
            r.macros.productDefinitionSearchPath = '\n'.join(path)
        else:
            ApplianceGroupRecipe.setApplianceSearchPath(r)

    def addAppliancePlatform(r):
        """
        Override to avoid creating group-core.
        """

        r.addAll('group-standard', flatten=True)
        r.addAll('group-rpath-core', flatten=True)
