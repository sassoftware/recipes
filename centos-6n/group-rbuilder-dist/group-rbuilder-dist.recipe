#
# Copyright (c) SAS Institute Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#


class GroupRbuilderDist(GroupSetRecipe):
    name = 'group-rbuilder-dist'
    version = '8'

    unwantedComponents = ['devel', 'devellib', 'doc', 'build-tree', 'tk', 'test', 'gtk']

    def setup(r):
        r.dumpAll()
        r.makeSearchPath()
        addToMain = []

        core = r.troveFromMacro('distro_label', 'group-standard')
        core = core.makeOptional(core.find(
            'kernel',
            'selinux-policy',
            'selinux-policy-targeted',
            ))
        system = r.mainSearchPath.find(
            'amiconfig',
            'conary',
            'dstat',
            'file',
            'kernel-buildme',
            'kexec-tools',
            'keyutils',
            'krb5-workstation',
            'less',
            'lsof',
            'mailx',
            'nano',
            'nc',
            'net-snmp',
            'nfs-utils',
            'ntp',
            'ntpdate',
            'openssh-clients',
            'open-vm-tools',
            'pam_krb5',
            'patch',
            'patch',
            'postfix',
            'python-supervisor',
            'rdiff-backup',
            'rpath-tools',
            'rsync',
            'samba-common',
            'samba-winbind',
            'samba-winbind-clients',
            'screen',
            'sqlite',
            'strace',
            'sysstat',
            'tcpdump',
            'tinc',
            'unzip',
            'vim-enhanced',
            'wget',
            'which',
            'ypbind',
            'yp-tools',

            # puppet
            'puppet',
            'puppet-stdlib',
            'rubygem-hiera:ruby',
            )

        ## group-rbuilder-appliance
        rbuilder = r.mainSearchPath.find(
            # group-rbuilder-appliance
            'catalog-service',
            'conary-web-common',
            'gunicorn',
            'make',
            'nginx:distro',
            'nginx:runtime',
            'samba',
            'samba-winbind',
            'samba-common',
            'rmake',
            'rpath-repeater',
            'rbuilder',
            'rbuilder-ui',

            # Postgres
            'django-db-postgres',
            'postgresql92:bin',
            'python-pgsql',
            'python-psycopg2',
            'pgbouncer:runtime',

            # memcache
            'django-cache-memcached',
            'memcached',
            'python-memcached',

            # MCP
            'jabberd',
            'mcp',
            'mcp-server',

            # Jobmaster
            'jobmaster',

            # rMake Multinode Server and Configuration.
            'rmake',
            'rmake-multinode-server',
            'rmake-node',
            'rmake3',
            'rmake3-multinode-server',
            'rmake3-node',
            'rpm-python',  # Fallback RPM
            'python-reportlab', # provides sgmlop, which makes rmake xmlrpc work better
            'group-rpm',
            )
        scripts = r.Scripts(
            preUpdate=r.Script(rba_prescript),
            postInstall=r.Script('#!/bin/bash\n'
                '/usr/share/rbuilder/scripts/post-install || exit 1\n'),
            postUpdate=r.Script('#!/bin/bash\n'
                '/usr/share/rbuilder/scripts/group-script || exit 1\n'),
            )

        rba = r.makeImageGroup('group-rbuilder-appliance', core + system + rbuilder, scripts=scripts)
        addToMain.append(rba)

        # add-on groups
        addToMain.append(r.makeZebra('group-ha', [
            'corosync',
            'crmsh',
            'drbd',
            'pacemaker',
            'puppet-corosync',
            'rbuilder-ha',
            'resource-agents',
            ], rba))
        addToMain.append(r.makeZebra('group-entsrv', [
            'entsrv',
            ], rba))

        # extras
        # NB: These are not installed on the appliance, but kept to simplify
        # release management.
        extras = r.mainSearchPath.find(
            'anaconda-custom',
            ).makeOptional()
        addToMain.append(extras)

        # devel
        devel = rba + r.mainSearchPath.find(
            'asciidoc',
            'autoconf',
            'automake',
            'binutils',
            'bison',
            'conary-build',
            'ctags',
            'distro-policy',
            'elfutils',
            'elfutils-libelf-devel',
            'expat-devel',
            'flex',
            'gcc',
            'gcc-c++',
            'gdb',
            'gdbm-devel',
            'gettext',
            'git',
            'glibc-utils',
            'intltool',
            'libcap-devel',
            'libidn-devel',
            'libtool',
            'libxml2-devel',
            'lzop',
            'man',
            'man-pages',
            'openssl-devel',
            'pyflakes',
            'python-devel',
            'python-keyutils',
            'python-requests',
            'python-webunit',
            'rbuild',
            'sqlite-devel',
            'testutils',
            'tmux',
            'xmlto',
            'xz',
            'zlib-devel',
            )
        devel += r.mainSearchPath['group-tags'].flatten().components('tagdescription')
        addToMain.append(r.makeImageGroup('group-rbuilder-devel', devel))

        ## group-rbuilder-dist -- just a bucket for the things created above
        main = addToMain.pop(0)
        for x in addToMain:
            main += x
        r.Group(main, checkPathConflicts=False)

    def makeImageGroup(r, name, troveset, scripts=None):
        troveset += troveset.depsNeeded(r.mainSearchPath)
        troveset = troveset.makeOptional(troveset.components(*r.unwantedComponents))
        return troveset.createGroup(name, scripts=scripts, imageGroup=True)

    def makeZebra(r, name, pkglist, base):
        "Make an add-on group for C{base} containing the packages named in C{pkglist}"
        stuff = r.mainSearchPath.find(*pkglist)
        stuff += (stuff + base).depsNeeded(r.mainSearchPath)
        stuff -= stuff.components(*r.unwantedComponents)
        return stuff.createGroup(name)

    def getAdditionalSearchPath(r):
        # Place new packages in the correct section, sorted alphabetically.
        packageSearchPath = []
        for macro, packages in [
                ('master_label', [
                        'amiconfig',
                        'anaconda-custom',
                        'catalog-service',
                        'conary',
                        'conary-build',
                        'conary-policy',
                        'conary-repository',
                        'conary-rest',
                        'entsrv',
                        'entsrv-appliance',
                        'info-credstore',
                        'info-entsrv',
                        'jobmaster',
                        'jobslave',
                        'mcp',
                        'mcp-server',
                        'pyovf',
                        'rbuild',
                        'rbuilder',
                        'rbuilder-ha',
                        'rbuilder-ui',
                        'restlib',
                        'rmake',
                        'rmake3',
                        'rmake3-multinode-server',
                        'rmake3-node',
                        'rmake-multinode-server',
                        'rmake-node',
                        'robj',
                        'rpath-job',
                        'rpath-models',
                        'rpath-product-definition',
                        'rpath-repeater',
                        'rpath-storage',
                        'rpath-tools',
                        'rpath-xmllib',
                        'smartform',
                        'testutils',
                        'xobj',
                      ]),
                ]:
            label = r.macros.get(macro)
            if label is None:
                continue
            packageSearchPath.append(r.Repository(label, r.flavor
                ).find(*packages))
        return packageSearchPath

    def troveFromMacro(r, macro, troveName):
        item = r.macros[macro]
        if '=' not in item:
            item = troveName + '=' + item
        return r.Repository(r.macros.buildlabel, r.flavor).find(item)

    def getAppliancePlatformSearchPath(r):
        return [
            r.troveFromMacro('platform_label', 'group-rpath-platform'),
            r.troveFromMacro('common_label', 'group-rpath-packages'),
            r.troveFromMacro('distro_label', 'group-os'),
            ]

    def makeSearchPath(r):
        searchPath = r.getAdditionalSearchPath() + r.getAppliancePlatformSearchPath()
        r.mainSearchPath = r.SearchPath(*searchPath)
        return r.mainSearchPath


rba_prescript = '''\
#!/bin/sh

if pgrep corosync >/dev/null || pgrep crmd >/dev/null
then
    echo "Skipping preupdate script because it looks like we're in a cluster"
    exit 0
fi

# Stop cron before updates, it will be started again in the postupdate script.
# (RBL-7971)
[ -e /var/lock/subsys/crond ] && service crond stop || true
'''
