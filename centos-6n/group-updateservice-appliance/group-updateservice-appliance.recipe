#
# Copyright (c) rPath, Inc.
#


class GroupUpdateServiceAppliance(GroupSetRecipe):
    name = 'group-updateservice-appliance'
    version = 'tip'

    unwantedComponents = ['devel', 'devellib', 'doc', 'build-tree', 'tk', 'test', 'gtk']

    def setup(r):
        r.dumpAll()
        r.makeSearchPath()
        addToMain = []

        ## group-updateservice -- core packages for updateservice
        # NOTE: This group should not contain *any* platform RPMs
        upsrv = r.mainSearchPath.find(
            'conary-web-common',
            'conary-rest',
            'updateservice',
            'updateservice-appliance',

            'rmake3',
            'rmake3-node',
            'rpath-repeater',

            # From group-rpath-platform
            'pgbouncer',
            'postgresql92',
            'python-memcached',
            'python-psycopg2',
            'python-webob',
            'rapa',
            'rapa-plugin-rPath',
            )
        # Add dependencies except for those from the platform
        upsrv += upsrv.depsNeeded(r.mainSearchPath)
        rmtroves = r.mainSearchPath.find('group-os', 'group-rpath-core').flatten()
        upsrv -= rmtroves.makeInstall()
        # Manually remove file conflicts with platform
        upsrv -= upsrv.find(
            'conary:data',
            )

        scripts = r.Scripts(
            postInstall=r.Script('''#!/bin/sh
            /srv/conary/bin/migrate-config
            /srv/conary/bin/migrate-repos
            chkconfig httpd on
            chkconfig pgbouncer on
            chkconfig postgresql-updateservice on
            exit 0
            '''),
            postUpdate=r.Script('''#!/bin/sh
            /srv/conary/bin/migrate-config
            /srv/conary/bin/migrate-repos
            exit 0
            '''),
            )
        upsrv -= upsrv.components(*r.unwantedComponents)
        groupUpsrv = upsrv.createGroup('group-updateservice', scripts=scripts)
        addToMain.append(groupUpsrv)

        ## group-updateservice-extras
        # NB: These are not installed on the appliance, but kept to simplify
        # release management.
        groupExtras = r.mainSearchPath.find(
            'anaconda-custom-updateservice',
            ).createGroup('group-updateservice-extras', checkPathConflicts=False)
        addToMain.append(groupExtras.makeOptional())

        ## group-updateservice-appliance
        appliance = r.mainSearchPath.find(
            'group-standard',
            'group-rpath-core',
            ).members()
        appliance += r.mainSearchPath.find(
            'openssh-clients',
            'rsync',
            'strace',
            'tcpdump',
            'vim-enhanced',
            'wget',
            'which',

            # Maintenance tools and monitoring
            'keyutils',
            'krb5-workstation',
            'lsof',
            'make',
            'nc',
            'net-snmp',
            'open-vm-tools',
            'patch',
            'rdiff-backup',
            'screen',
            'sqlite',
            'sudo',
            )
        appliance -= appliance.find(
            'selinux-policy',
            'selinux-policy-targeted',
            )
        for item in addToMain:
            appliance += item
        appliance += appliance.depsNeeded(r.mainSearchPath)
        r.Group(appliance)


    def getAdditionalSearchPath(r):
        # Place new packages in the correct section, sorted alphabetically.
        packageSearchPath = []
        for macro, packages in [
                # rBuilder components from the build label
                ('master_label', [
                        'anaconda-custom-updateservice',
                        'conary',
                        'conary-build',
                        'conary-policy',
                        'conary-repository',
                        'rmake',
                        'rmake3',
                        'rmake3-multinode-server',
                        'rmake3-node',
                        'updateservice',
                        'updateservice-appliance',
                        'wmiclient',
                      ]),
                ('base_label', [
                        'conary-rest',
                        'restlib',
                        'robj',
                        'rpath-models',
                        'rpath-repeater',
                        'rpath-tools',
                        'smartform',
                        'xobj',
                      ]),
              ]:
            label = r.macros.get(macro)
            if label is None:
                continue
            packageSearchPath.append(r.Repository(label, r.flavor
                ).find(*packages))
        return packageSearchPath

    def getAppliancePlatformSearchPath(r):
        """
        Derive a platform search path from some input macros, unless one
        was supplied in a rbuild-compatible form.
        """
        common = r.macros.get('common_label', 'centos6.rpath.com@rpath:centos-6-common')
        distro = r.macros.get('distro_label', 'centos6.rpath.com@rpath:centos-6e')
        return [
            r.Repository(r.macros.platform_label, r.flavor).find('group-rpath-platform'),
            r.Repository(common, r.flavor).find('group-rpath-packages'),
            r.Repository(distro, r.flavor).find('group-os'),
            ]

    def makeSearchPath(r):
        searchPath = r.getAdditionalSearchPath() + r.getAppliancePlatformSearchPath()
        r.mainSearchPath = r.SearchPath(*searchPath)
        return r.mainSearchPath
