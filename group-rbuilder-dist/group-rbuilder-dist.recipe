#
# Copyright (c) 2010 rPath, Inc.
#
# All Rights Reserved
#

from conary.lib import log

loadSuperClass('group-appliance', 'conary.rpath.com@rpl:2')
class GroupRbuilderDist(ApplianceGroupRecipe):
    name = 'group-rbuilder-dist'
    version = '5.5.0'

    # group-rbuilder-dist is a trove bucket, not an image group, so disable
    # most checks.  See below for the actual image group definitions.
    imageGroup = False
    depCheck = False
    autoResolve = False
    checkPathConflicts = False

    unwantedComponents = ['devel', 'devellib', 'doc', 'build-tree', 'tk', 'test', 'gtk']

    def setup(r):
        if 'platform_label' in r.macros:
            r.groupLabel = 'conary.rpath.com@rpl:2-py26-devel'
        r.setApplianceSearchPath()
        # XXX FIXME
        if 'platform_label' in r.macros:
            pypgsqlLabel = 'conary.rpath.com@rpl:2-py26-devel'
            rpmLabel = 'conary.rpath.com@rpl:2-py26-devel'
        else:
            pypgsqlLabel = 'testbits.rb.rpath.com@rpl:2'
            rpmLabel = 'cantwait.rpath.org@rpl:2'

        ## group-core - Platform used by all products of this recipe
        r.addAppliancePlatform()

        # Use a devel kernel for now
        r.replace('kernel', 'conary.rpath.com@rpl:2-devel', '~xen,~domU,~vmware')

        # Replace conary
        r.replace('conary', groupName='group-core')
        r.add('conary-build')
        r.add('conary-repository')
        r.add('conary-policy')

        r.replace('iproute') # need one with `ip link add`
        r.add('iftop')
        r.add('less:runtime')
        r.add('mailx')
        r.add('nano:runtime')
        r.add('openssh-client')
        r.add('openssh-server')
        r.add('rsync')
        r.add('sendmail')
        r.add('strace')
        r.add('sysstat')
        r.add('tcpdump')
        r.add('wget')
        r.add('which')
        r.add('dstat')
        r.add('vim')
        r.replace('splashy-theme') # replaced by rbuilder

        # Appliance Platform Agent
        r.add('group-rapa')
        r.add('rapa-console')

        # Maintenance tools and monitoring
        r.add('yp-tools')
        r.add('ypbind')
        r.add('patch')
        r.add('net-snmp')
        r.add('net-snmp-server')
        r.add('nrpe')
        r.add('nagios-plugins')
        r.add('open-vm-tools')
        r.add('rdiff-backup')
        r.add('screen')
        r.add('sudo')
        r.add('lsof')

        ## group-rbuilder - Mint Web Front-end
        r.ourStartGroup('group-rbuilder', r.name, topLevel = False)

        r.add('conary-web-common')
        r.add('httpd')
        r.add('make')
        r.add('mod_ssl')
        r.add('mod_python')
        r.add('PIL:python')
        r.add('samba:runtime')
        r.add('simplejson')
        r.add('sqlite:runtime')

        r.add('MochiKit')
        r.add('rmake')
        r.add('rpath-repeater')
        r.add('yui')
        r.add('robj')
        r.add('wmiclient')

        r.add('rbuilder')
        r.add('rbuilder-ui')

        # Postgres
        r.add('django-db-postgres')
        r.add('postgresql:bin')
        r.add('psycopg2')
        r.add('python-pgsql', pypgsqlLabel)
        r.add('pgbouncer:runtime')
        # We need locale data for compatibility with postgresql data
        # stores initialized in rPL 1.
        r.add('glibc:locale')
        # Legacy postgres for migrations
        r.add('postgresql:lib', 'postgres.rpath.org@rpl:postgres-8.2-devel')
        r.add('postgresql:runtime', 'postgres.rpath.org@rpl:postgres-8.2-devel')

        # MCP
        r.ourStartGroup('group-mcp', r.name, topLevel = False)
        r.add('jabberd')
        r.add('mcp')
        r.add('mcp-server')

        ## rMake Multinode Server and Configuration.
        r.add('rmake')
        r.add('rmake-multinode-server')
        r.add('rmake-node')
        r.add('rmake3')
        r.add('rmake3-multinode-server')
        r.add('rmake3-node')
        r.add('rpm', rpmLabel)  # Fallback RPM
        r.add('group-rpm')

        ## group-extras
        # NB: These are not installed on the appliance, but kept to simplify
        # release management.
        r.ourStartGroup('group-extras', r.name, topLevel=False, byDefault=False,
                        checkPathConflicts=False)
        r.add('anaconda-custom')
        r.add('anaconda-custom-updateservice')
        r.add('media-template')

        ## group-updateservice -- core packages for updateservice
        r.ourStartGroup('group-updateservice', r.name, topLevel=False)
        r.add('conary')
        r.add('conary-repository')
        r.add('conary-web-common')
        r.add('updateservice')
        r.add('conary-rest')
        r.add('restlib')
        r.add('robj')
        r.add('xobj:python')
        r.add('postgresql:bin')
        r.add('python-pgsql', pypgsqlLabel)
        r.add('httpd')
        r.add('make')
        r.add('mod_ssl')
        r.add('mod_python')
        r.add('samba:runtime')
        r.add('sqlite:runtime')
        # NOTE: the following packages should be able to coexist
        # with other services on an appliance (e.g., for US2US),
        # but currently there are system-wide config changes which
        # prevent this.  Need to split some things out of here.
        r.add('updateservice-appliance')

        ###### PRODUCTS ######
        ## group-rbuilder-appliance - rBuilder Appliance
        r.ourStartGroup('group-rbuilder-appliance', r.name, topLevel = True)
        r.addNewGroup('group-core', groupName='group-rbuilder-appliance')
        r.addNewGroup('group-rbuilder', groupName='group-rbuilder-appliance')
        r.addNewGroup('group-mcp', groupName='group-rbuilder-appliance')
        r.add('jobmaster', groupName='group-rbuilder-appliance')
        r.add('rbuilder-mcp')
        r.addPreUpdateScript('prescript.sh', groupName='group-rbuilder-appliance')
        r.addPostInstallScript(contents='''#!/bin/bash
            /usr/share/rbuilder/scripts/group-script
            ''', groupName='group-rbuilder-appliance')
        r.addPostUpdateScript(contents='''#!/bin/bash
            /usr/share/rbuilder/scripts/group-script
            ''', groupName='group-rbuilder-appliance')

        ## group-updateservice-appliance - rPath Update Service
        r.ourStartGroup('group-updateservice-appliance', r.name, topLevel = True)
        r.addNewGroup('group-core', groupName='group-updateservice-appliance')
        r.addNewGroup('group-updateservice', groupName='group-updateservice-appliance')
        r.add('rmake3')
        r.add('rmake3-node')
        r.add('rpath-repeater')
        r.add('wmiclient')
        r.addPostInstallScript(contents='''#!/bin/sh
            /srv/conary/bin/migrate-config
            /srv/conary/bin/migrate-repos
            exit 0
            ''', groupName='group-updateservice-appliance')
        r.addPostUpdateScript(contents='''#!/bin/sh
            /srv/conary/bin/migrate-config
            /srv/conary/bin/migrate-repos
            exit 0
            ''', groupName='group-updateservice-appliance')

        # xen flavor is unnecessary for rBO, so turn these off to save
        # build time.
        if not Use.xen:
            ## group-jobmaster-standalone - Standalone Jobmaster (rBO only, not a product!)
            r.ourStartGroup('group-jobmaster-standalone', r.name, topLevel = True)
            r.addNewGroup('group-core')
            r.add('jobmaster')
            r.add('rbuilder-mcp')

            ## group-rbuilder-standalone - Standalone rBuilder (rBO only, not a product!)
            r.ourStartGroup('group-rbuilder-standalone', r.name, topLevel = True)
            r.addNewGroup('group-core')
            r.addNewGroup('group-rbuilder')
            r.addNewGroup('group-mcp')

    def getInitialSearchPath(r):
        """
        We don't want to ever implicitly use the build label. Any troves
        from the build label must be specified as such in the search path
        or in C{r.add()}.
        """
        return []

    def getAdditionalSearchPath(r):
        """
        Set a package search path from a plethora of macros. This covers all
        the product components and dependencies that aren't part of the
        platform, e.g. everything except rPA, rPL, and rLS.
        """
        # Place new packages in the correct section, sorted alphabetically.
        packageSearchPath = []
        for macro, packages in [
                # rBuilder components from the build label
                ('buildlabel', [
                        'anaconda-custom',
                        'jobmaster',
                        'media-template',
                        'rbuilder',
                        'rbuilder-mcp',
                        'splashy-theme',
                      ]),
                ('master_label', [
                        'anaconda-custom-updateservice',
                        'catalog-service',
                        'conary',
                        'conary-build',
                        'conary-policy',
                        'conary-repository',
                        'conary-rest',
                        'mcp',
                        'mcp-server',
                        'pcreator',
                        'pyovf',
                        'rbuilder-ui',
                        'rmake',
                        'rmake-multinode-server',
                        'rmake-node',
                        'rmake3',
                        'rmake3-multinode-server',
                        'rmake3-node',
                        'repodata',
                        'restlib',
                        'robj',
                        'rpath-capsule-indexer',
                        'rpath-job',
                        'rpath-models',
                        'rpath-product-definition',
                        'rpath-repeater',
                        'rpath-storage',
                        'rpath-xmllib',
                        'smartform',
                        'updateservice',
                        'updateservice-appliance',
                        'wmiclient',
                        'xobj',
                      ]),

                # Other components
                ('xen_label',               ['XenAPI']),
                ('rpm_label',               ['group-rpm']),

                # Platform overrides/extras
                ('contrib_label', [
                        'boto',
                        'decorator',
                        'django',
                        'django-db-postgres',
                        'django-db-sqlite3',
                        'django-rest-interface',
                        'django-debug-toolbar',
                        'dstat',
                        'info-nagios',
                        'info-jabber',
                        'iftop',
                        'iproute', # need one with `ip link add`
                        'jabberd',
                        'libevent',
                        'libgsasl', # dep of jabberd
                        'librsync', # dep of rdiff-backup
                        'markdown', # dep of django
                        'MochiKit[~MochiKit.packed]',
                        'nagios-plugins',
                        'nrpe',
                        'psycopg2',
                        'pyOpenSSL', # dep of python-twisted
                        'python-ctypes',
                        'python-dateutil',
                        'python-twisted',
                        'python-txpostgres', # dep of rmake
                        'python-wokkel', # dep of rmake3
                        'python-zopeinterface', # dep of python-twisted
                        'pywbem',
                        'PyYAML',
                        'rdiff-backup',
                        'SQLAlchemy',
                        'udns', # dep of jabberd
                        'vobject',
                        'xz', # rpm depends on xz:lib, which rPL 2 omits
                        'yui',
                    ]),
                ('java_label',              ['sun-jdk', 'sun-jre']),
                ('pgbouncer_version',       ['pgbouncer']),
                ('pgsql_label',             ['postgresql']),
              ]:
            if macro not in r.macros:
                continue
            for package in packages:
                pkgVersion = r.macros.get(macro, '')
                if '[' in package:
                    x = package.index('[')
                    package, flavor = package[:x], package[x:]
                    packageSearchPath.append('%s=%s%s' % (
                            package, pkgVersion, flavor))
                else:
                    packageSearchPath.append('%s=%s' % (package, pkgVersion))

        if not r._lightInstance:
            log.info("Package search path:")
            for entry in packageSearchPath:
                log.info(" %s", entry)
            # HACK: only return the CNY-3286 search path for real cooks until
            # 2.1.0 is fully released; this makes it possible to commit recipe
            # changes without needing a checkout.
            return [packageSearchPath]
        else:
            return packageSearchPath

    def getAppliancePlatformSearchPath(r):
        """
        Derive a platform search path from some input macros, unless one
        was supplied in a rbuild-compatible form.
        """
        if 'productDefinitionSearchPath' in r.macros:
            path = r.macros.productDefinitionSearchPath.split('\n')
        else:
            rapaVersion =   r.macros.get('rapa_label', 'conary.rpath.com@rpl:2')
            rPLVersion =    r.macros.get('distro_version', 'conary.rpath.com@rpl:2')

            path = [
                'group-rapa=%s' % rapaVersion,
                'group-os=%s[%s]' % (rPLVersion, r.groupCoreFlavor),
              ]
            if 'platform_label' in r.macros:
                # XXX FIXME
                path.insert(0, 'group-rpath-platform=%s' % r.macros.platform_label)

        if not r._lightInstance:
            log.info("Platform search path:")
            for entry in path:
                log.info(" %s", entry)
        return path

    def setApplianceSearchPath(r):
        if 'searchPathOverride' in r.macros:
            path = r.macros.searchPathOverride.split('\n')
            r.setSearchPath(*path)

            # Set PDSP for addAppliancePlatform() to use
            r.macros.productDefinitionSearchPath = '\n'.join(path)
        else:
            ApplianceGroupRecipe.setApplianceSearchPath(r)

    def ourStartGroup(r, name, parentGroup, topLevel=False, byDefault=True,
            checkPathConflicts=True):
        # creates group named "name", adds it to the toplevel group,
        # and sets the current group to that name.  calls to r.add()
        # will use the current group by default.

        # note: byDefault applies to whether the group is included by
        # default in its parent group, not whether the troves in
        # the group are added by default. (use the setByDefault() command
        # to get that)

        # get all the the default for the new group from its parent group.
        if parentGroup:
            r.setDefaultGroup(parentGroup)

        r.createGroup(name, autoResolve=topLevel, depCheck=topLevel,
                        checkOnlyByDefaultDeps=True,
                        checkPathConflicts=checkPathConflicts)

        if parentGroup:
            r.addNewGroup(name, groupName=parentGroup, byDefault=byDefault)
        r.setDefaultGroup(name)

        r.removeComponents(r.unwantedComponents)
