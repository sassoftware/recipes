#
# Copyright (c) SAS Institute Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#


class GroupRpathPackages(GroupSetRecipe):
    name = 'group-rpath-packages'
    version = '0'

    imageGroup = False
    checkPathConflicts = True

    def setup(r):
        r.dumpAll()
        # This prevents the builds of this platform from
        # trying to include the xen/domU/dom0/vmware
        # flavors due to the multiple available
        Use.xen.setPlatform(False)
        Use.domU.setPlatform(False)
        Use.dom0.setPlatform(False)
        Use.vmware.setPlatform(False)

        local  = r.Repository(r.macros.buildlabel, r.flavor)
        master = r.Repository(r.macros.master_label, r.flavor)
        common = r.Repository(r.macros.common_label, r.flavor)

        # Some things really don't need to be in a subgroup
        packages = common.find(
            # Not sure what group to put these in yet...
            'xtail-conary',
            )

        ## group-superclasses
        groupSuperclasses = common.find(
            'autopackage',
            'baserequires',
            'buildpackage',
            'capsule',
            'cpackage',
            'derived',
            'derivedcapsule',
            'fileset',
            'group',
            'groupinfo',
            'groupset',
            'package',
            'redirect',
            'userinfo',
            'rpathpackage',
            ).createGroup('group-superclasses')
        packages += groupSuperclasses.makeOptional()

        ## group-factories
        groupFactories = common.find(
            'capsule-kmod-import',
            'capsule-rpm-import',
            'factory-archive',
            'factory-base-packagecreator',
            'factory-capsule-rpm',
            'factory-capsule-rpm-pc',
            'factory-group-base',
            'factory-hgsource',
            'factory-managed-group',
            'factory-managed-errata-group',
            'factory-version',
            'factory-puppet-pc',
            ).createGroup('group-factories')
        packages += groupFactories.makeOptional()        

        ## group-tags
        groupTags = common.find(
            'tag-cacheable-font',
            'tag-desktop-file',
            'tag-gdk-pixbuf-loader',
            'tag-gtk-input-method',
            'tag-gtk-update-icon-cache',
            'tag-info-file',
            'tag-initscript',
            'tag-kernel',
            'tag-mime-database',
            'tag-pangomodule',
            'tag-shell',
            'tag-usergroup-info',
            ).createGroup('group-tags')
        packages += groupTags.makeOptional()

        ## group-rpath-tools
        groupRpathTools = common.find(
            'distro-policy',
            'libelf-lgpl',
            ) + master.find(
            'amiconfig',
            'conary',
            'conary-build',
            'conary-policy',
            'conary-repository',
            'rpath-tools',
            'rpath-models',
            'smartform',
            )
        # Optional
        groupRpathTools += (local.find(
            'open-vm-tools',
            'info-vboxadd',
            'info-vboxsf',
            'virtualbox-addons',
            'virtualbox-addons-vboxsf',
            #'parallel-tools', # Remove for the time being on unresolved dep
            'parallel-tools-fs',
            ) + common.find(
            'fltk-conary',
            'xe-guest-utilities',
            )).makeOptional()
        # The versions built on the centos-6-%(forest)s labels 
        # do not have all the flavors so this is not necessary
        # leaving the stanza for future when moved to platform
        if Arch.x86:
            groupRpathTools += local.find(
                'kmod-open-vm-tools[~!kmod-open-vm-tools.debug]',
                'kmod-virtualbox-addons[~!kmod-virtualbox-addons.debug]',
                'kmod-parallel-tools[~!kmod-virtualbox-addons.debug]',
                ).makeOptional()
        else:
            groupRpathTools += local.find(
                'kmod-open-vm-tools[~!kmod-open-vm-tools.debug]',
                'kmod-virtualbox-addons[~!kmod-virtualbox-addons.debug]',
                'kmod-parallel-tools[~!kmod-virtualbox-addons.debug]',
                ).makeOptional()


        groupRpathTools = r.rmcomps(groupRpathTools).createGroup('group-rpath-tools')
        packages += groupRpathTools

        ## group-rpath-core
        # Built from things already in the packages set
        groupRpathCore = packages.find(
            'amiconfig',
            'conary',
            'rpath-tools',
            'open-vm-tools',
            'kmod-open-vm-tools',
            'virtualbox-addons-vboxsf',
            'kmod-virtualbox-addons',
            'parallel-tools-fs',
            'kmod-parallel-tools',
            )
        groupRpathCore = r.rmcomps(groupRpathCore).createGroup('group-rpath-core')
        packages += groupRpathCore

        # Check that the group can be dep closed by downstream consumers
        os = r.Repository(r.macros.distro_label, r.flavor).find('group-os')
        packages.flatten().makeInstall().depsNeeded(os)

        r.Group(packages)

    def rmcomps(r, troveset):
        return troveset.makeOptional(troveset.flatten().components('devel', 'devellib'))
