#
# Copyright (c) SAS Institute Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#


class GroupRpathPackages(GroupSetRecipe):
    name = 'group-rpath-packages'
    version = '0'

    imageGroup = False
    checkPathConflicts = True

    def setup(r):
        r.dumpAll()
        # This prevents the builds of this platform from
        # trying to include the xen/domU/dom0/vmware
        # flavors due to the multiple available
        Use.xen.setPlatform(False)
        Use.domU.setPlatform(False)
        Use.dom0.setPlatform(False)
        Use.vmware.setPlatform(False)

        local = r.Repository(r.macros.buildlabel, r.flavor)
        common = r.Repository(r.macros.common_label, r.flavor)

        # Some things really don't need to be in a subgroup
        packages = common.find(
            'mercurial-conary',
            'python-setuptools-conary',
            'xtail-conary',

            # Not sure what group to put these in yet...
            'puppet',
            'facter',
            'info-puppet',
            )

        ## group-superclasses
        groupSuperclasses = common.find(
            'autopackage',
            'baserequires',
            'buildpackage',
            'capsule',
            'cpackage',
            'derived',
            'derivedcapsule',
            'fileset',
            'group',
            'groupinfo',
            'groupset',
            'package',
            'redirect',
            'userinfo',
            'rpathpackage',
            ).createGroup('group-superclasses')
        packages += groupSuperclasses.makeOptional()

        ## group-factories
        groupFactories = common.find(
            'capsule-kmod-import',
            'capsule-rpm-import',
            'factory-archive',
            'factory-base-packagecreator',
            'factory-capsule-rpm',
            'factory-capsule-rpm-pc',
            'factory-group-base',
            'factory-hgsource',
            'factory-managed-group',
            'factory-managed-errata-group',
            'factory-version',
            'factory-puppet-pc',
            ).createGroup('group-factories')
        packages += groupFactories.makeOptional()

        ## group-rpath-tools
        groupRpathTools = common.find(
            'distro-policy',
            'libelf-lgpl',
            'python-conary',
            ) + local.find(
            'amiconfig',
            'amiconfig-vmwareguest',
            'conary',
            'conary-build',
            'conary-policy',
            'conary-repository',
            )
        # Optional
        groupRpathTools += (common.find(
            'open-vm-tools',
            'xe-guest-utilities',
            )).makeOptional()
        if Arch.x86:
            groupRpathTools += common.find(
                'kmod-open-vm-tools[!kmod-open-vm-tools.pae,kmod-open-vm-tools.debug]',
                'kmod-open-vm-tools[kmod-open-vm-tools.pae,!kmod-open-vm-tools.debug]',
                'kmod-open-vm-tools[!kmod-open-vm-tools.pae,!kmod-open-vm-tools.debug]',
                ).makeOptional()
        else:
            groupRpathTools += common.find(
                'kmod-open-vm-tools[kmod-open-vm-tools.debug]',
                'kmod-open-vm-tools[!kmod-open-vm-tools.debug]',
                ).makeOptional()
        groupRpathTools = r.rmcomps(groupRpathTools).createGroup('group-rpath-tools')
        packages += groupRpathTools

        ## group-tags
        groupTags = common.find(
            'tag-cacheable-font',
            'tag-desktop-file',
            'tag-gdk-pixbuf-loader',
            'tag-gtk-input-method',
            'tag-gtk-update-icon-cache',
            'tag-info-file',
            'tag-initscript',
            'tag-kernel',
            'tag-mime-database',
            'tag-pangomodule',
            'tag-shell',
            'tag-usergroup-info',
            ).createGroup('group-tags')
        packages += groupTags.makeOptional()

        ## group-rpath-cim
        groupRpathCim = (common.find(
            # NOTE: the first three packages here are just build requirements,
            # and need not be installed on a deployed system.
            'w3c-libwww',
            'xmlrpc-c',
            'cmake',
            'openslp-conary',
            'sblim-sfcc-conary',
            'sblim-sfcb-schema-conary',
            'sblim-sfcb-conary',
            'info-sfcb',
            'libxml2-conary',
            'm2crypto-conary',
            'python-lxml-conary',
            'python-dmidecode-conary',
            'python-setuptools-conary',
            'pywbem-conary',
            'sblim-cmpi-devel-conary',
            'sblim-cmpi-base-conary',
            'sblim-cmpi-network-conary',
            'cmpi-bindings-conary',
            'genshi-conary',
            ) + local.find(
            'conary-cim',
            'conary-cim-configuration',
            'rpath-models',
            'rpath-tools',
            'smartform-conary',
            'iconfig',
            ))
        groupRpathCim = r.rmcomps(groupRpathCim).createGroup('group-rpath-cim')
        packages += groupRpathCim.makeOptional()

        ## group-rpath-core
        # Built from things already in the packages set
        groupRpathCore = packages.find(
            'amiconfig',
            'amiconfig-vmwareguest',
            'conary',
            'libelf-lgpl',
            'python-conary',
            'sblim-sfcc-conary',
            'sblim-sfcb-schema-conary',
            'sblim-sfcb-conary',
            'conary-cim',
            'conary-cim-configuration',
            'rpath-tools',
            'm2crypto-conary',
            'iconfig',
            )
        groupRpathCore = r.rmcomps(groupRpathCore).createGroup('group-rpath-core')
        packages += groupRpathCore


        # Check that the group can be dep closed by downstream consumers
        os = r.Repository(r.macros.distro_label, r.flavor).find('group-os')
        packages.flatten().makeInstall().depsNeeded(os)

        r.Group(packages)

    def rmcomps(r, troveset):
        return troveset.makeOptional(troveset.flatten().components('devel', 'devellib'))
