#
# Copyright (c) 2011 rPath, Inc.
# This file is distributed under the terms of the MIT License.
# A copy is available at http://www.rpath.com/permanent/mit-license.html
#
loadRecipe('open-vm-tools')
#loadInstalled('kernel')
class KmodOpenVMTools(OpenVmTools):
    name = 'kmod-open-vm-tools'
    version = '9.4.6_1770165'

    buildRequires = [ 'gcc-c++:rpm', 
                      'libICE-devel:rpm', 
                      'libstdc++-devel:rpm',
                      'pam-devel:rpm', 
                      'pkgconfig:rpm', 
                      'glib2-devel:rpm',
                      #'group-kernel-devel',
                      'kernel',
                      'kernel-devel',
                      'kernel-abi-whitelists:rpm',
                      'kabi-whitelists:rpm',
                      'libicu-devel:rpm',
                      'procps:rpm',
                      'tag-kernel:tagdescription',
                      'redhat-rpm-config',
                      'vim-enhanced:rpm',
                      'fuse-devel:rpm',
                    ]

    Flags.debug = False

    extraopts = ' --with-kernel-release=%(kvers)s --with-linuxdir=%(kdevel)s '

    def setup(r):
        # Use unpack method from open-vm-tools.recipe update
        r.unpackOpenVMTools()
        r.prepOpenVMTools()
        r.buildOpenVMTools()

    def detectKVers(r):
        """
        Find the kver for all kernel modules that have been installed.
        """
        import glob
        #testPath = '/lib/modules/*'
        # Only works because we are installing group-kernel-devel
        testPath = '/usr/src/kernels/*'


        buildTrees = glob.glob(testPath)
        #no longer works until group-kernel-devel is isntalled
        #if len(buildTrees) == 0:
        #    raise RuntimeError("No kernel modules found.")

        kvers = [ x.split('/')[-1] for x in buildTrees ]

        return max(kvers)


    def buildOpenVMTools(r):
        # Pull versions from open-vm-tools
        r.macros.ovmtoolsver = OpenVmTools.version.replace('_', '-')
        r.macros.ovmname = OpenVmTools.name
        r.macros.ovmdir = '%s' % r.ovmdir
        # Build VMware kernel modules
        # Insert logic to determine kernel flavor here.
        r.macros.variant = ''
        if Flags.debug:
            # assume debug kernel
            #r.macros.variant = '.debug'
            r.macros.variant = ''

        KernelVer = r.detectKVers()

        for m in ('vmblock', 'vmci', 'vmhgfs',
                    'vmsync', 'vsock', 'vmxnet'):
                    r.Replace('HEADER_DIR =', 'HEADER_DIR ?=', 'modules/linux/' + m + '/Makefile')


        r.macros.modules = '/tmp/rmake/builds/kmod-open-vm-tools/_ROOT_/lib/modules'
        r.macros.kvers = '%s%s' % (KernelVer, r.macros.variant)
        r.macros.kmoddir = '%(modules)s/%(kvers)s/kernel/extra' % r.macros
        r.macros.kdevel = '/usr/src/kernels/%(kvers)s' % r.macros
        r.macros.kinclude = '%(kdevel)s/include' % r.macros
        r.macros.vmsrc = '%(ovmname)s-%(ovmtoolsver)s' % r.macros


        r.Make('HEADER_DIR=%(kinclude)s VM_KBUILD=26 modules' % r.macros, dir='modules')

        r.Make('MODULES_DIR=%(kmoddir)s/open-vm-tools'
                ' KERNEL_RELEASE=%(kvers)s VM_UNAME=%(kvers)s install-exec' % r.macros, dir='modules')

        r.ByDefault(exceptions=':supdoc')
        r.Requires('soname: /lib/modules/%(kvers)s/kernel/drivers/scsi/sg.ko' % r.macros, '/lib/modules/%(kvers)s/kernel/extra/open-vm-tools/vmhgfs.ko')
 

