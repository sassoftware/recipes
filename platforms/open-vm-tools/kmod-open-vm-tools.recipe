#
# Copyright (c) 2011 rPath, Inc.
# This file is distributed under the terms of the MIT License.
# A copy is available at http://www.rpath.com/permanent/mit-license.html
#
loadRecipe('open-vm-tools')
loadInstalled('kernel')
class KmodOpenVMTools(OpenVmTools):
    name = 'kmod-open-vm-tools'
    version = OpenVmTools.version

    buildRequires = [ 'gcc-c++:rpm', 
                      'libICE-devel:rpm', 
                      'libstdc++-devel:rpm',
                      'pam-devel:rpm', 
                      'pkgconfig:rpm', 
                      'glib2-devel:rpm',
                      'group-kernel-devel',
                      'libicu-devel:rpm',
                      'procps:rpm',
                      'tag-kernel:tagdescription',
                      'redhat-rpm-config',
                      'vim-enhanced:rpm',
                      'fuse-devel:rpm',
                    ]

    Flags.debug = False

    def setup(r):
        # Use unpack method from open-vm-tools.recipe update
        #r.unpack()
        r.unpackOpenVMTools()
        r.setupOpenVMTools()

    def detectKVers(r):
        """
        Find the kver for all kernel modules that have been installed.
        """
        import glob
        #testPath = '/lib/modules/*'
        # Only works because we are installing group-kernel-devel
        testPath = '/usr/src/kernels/*'


        buildTrees = glob.glob(testPath)
        #no longer works until group-kernel-devel is isntalled
        #if len(buildTrees) == 0:
        #    raise RuntimeError("No kernel modules found.")

        kvers = [ x.split('/')[-1] for x in buildTrees ]

        return kvers


    def unpackOpenVMTools(r):
        r.macros.ovmtoolsver = OpenVmTools.version.replace('_', '-')
        r.macros.ovmname = OpenVmTools.name
        r.macros.ovmdir = '%s' % r.ovmdir 
        r.addArchive('http://sourceforge.net/projects/open-vm-tools/files/'
                        '%(ovmname)s/%(ovmdir)s/%(ovmname)s-%(ovmtoolsver)s.tar.gz')
        r.addPatch('modules_makefile.patch')
        r.addPatch('kernel_devel.patch')

    def setupOpenVMTools(r):
        # Build VMware kernel modules
        # Insert logic to determine kernel flavor here.
        r.macros.variant = ''
        if Flags.debug:
            # assume debug kernel
            #r.macros.variant = '.debug'
            r.macros.variant = ''

        r.Symlink('/lib/modules/kabi-current', '/lib/modules/kabi')

        KernelVers = r.detectKVers()

        for m in ('vmblock', 'vmci', 'vmhgfs',
                    'vmsync', 'vsock', 'vmxnet'):
                    r.Replace('HEADER_DIR =', 'HEADER_DIR ?=', 'modules/linux/' + m + '/Makefile')

        configured = False
        for KernelVer in KernelVers:

            r.macros.modules = '/tmp/rmake/builds/kmod-open-vm-tools/_ROOT_/lib/modules'
            r.macros.kvers = '%s%s' % (KernelVer, r.macros.variant)
            r.macros.kmoddir = '%(modules)s/%(kvers)s/kernel/extra' % r.macros
            r.macros.kdevel = '/usr/src/kernels/%(kvers)s' % r.macros
            r.macros.kinclude = '%(kdevel)s/include' % r.macros
            r.macros.vmsrc = '%(ovmname)s-%(ovmtoolsver)s' % r.macros

            if configured:
                r.Make(' clean',  dir='modules')

            r.Configure(r.configopts +
                    '--with-kernel-release=%(kvers)s '
                    '--with-linuxdir=%(kdevel)s ' % r.macros
                    )

            r.Make('HEADER_DIR=%(kinclude)s VM_KBUILD=26 modules' % r.macros, dir='modules')

            r.Make('MODULES_DIR=%(kmoddir)s/open-vm-tools'
                    ' KERNEL_RELEASE=%(kvers)s VM_UNAME=%(kvers)s install-exec' % r.macros, dir='modules')

            configured = True

        r.ByDefault(exceptions=':supdoc')
        r.KmodRequires(exceptions='.*')

