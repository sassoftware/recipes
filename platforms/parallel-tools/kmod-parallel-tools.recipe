
loadRecipe('parallel-tools')

class KmodParallelTools(ParallelTools):
    name = 'kmod-parallel-tools'
    version = ParallelTools.version

    buildRequires = [ 'gcc:rpm',
                      'glib2-devel:rpm',
                      'kernel-abi-whitelists:rpm',
                      'kabi-whitelists:rpm',
                      'group-kernel-devel',
                      'libicu-devel:rpm',
                      'redhat-rpm-config:rpm',
                      'tag-kernel',
                    ]

    Flags.debug = False

    def setup(r):
        r.unpackParallelTools()
        r.makeParallelTools()

    def unpackParallelTools(r):
        r.macros.prlname = r.macros.name.split('-', 1)[-1]
        r.macros.version = r.macros.version.replace('_', '-')
        r.macros.major = '.'.join(r.macros.version.split('.')[:3])
        r.macros.tools = 'tools'
        r.macros.kmods = 'kmods'
        r.macros.src = 'src'
        r.macros.prlsrc = '/usr/src/parallels-tools/%(name)s-%(major)s'
        r.macros.tarball = 'prl_mod.tar.gz'

        r.addArchive('%(prlname)s-%(major)s.tar.gz')
        
        r.addSource('prl-tools_kmod.patch')

        r.MakeDirs('%(src)s')
        
        r.Run('tar -zxvf %(builddir)s/%(kmods)s/%(tarball)s -C %(builddir)s/%(src)s')
        r.Run('patch -p0 < %(builddir)s/prl-tools_kmod.patch')


    def detectKVers(r):
        """
        Find the kver for all kernel modules that have been installed.
        """
        import glob
        #testPath = '/lib/modules/*'
        # Only works because we are installing group-kernel-devel
        testPath = '/usr/src/kernels/*'

        buildTrees = glob.glob(testPath)
        #if len(buildTrees) == 0:
        #    raise RuntimeError("No kernel modules found.")

        kvers = [ x.split('/')[-1] for x in buildTrees ]

        return kvers

    def makeParallelTools(r):
        # Build VMware kernel modules
        # Insert logic to determine kernel flavor here

        r.macros.variant = ''
        if Flags.debug:
            # assume debug kernel
            #r.macros.variant = '.debug'
            r.macros.variant = ''


        KernelVers = r.detectKVers()
        for KernelVer in KernelVers:

            r.macros.modules = '/tmp/rmake/builds/kmod-parallel-tools/_ROOT_/lib/modules'
            r.macros.kvers = '%s%s' % (KernelVer, r.macros.variant)
            r.macros.kmoddir = '%(modules)s/%(kvers)s/kernel/extra' % r.macros
            r.macros.kdevel = '/usr/src/kernels/%(kvers)s' % r.macros
            r.macros.kinclude = '%(kdevel)s/include' % r.macros
            r.macros.src = '%(src)s' % r.macros


            r.Make( 'KVER=%(kvers)s '
                    'KERNEL_DIR=%(kdevel)s ' 
                    'clean', dir = '%(src)s' % r.macros)
            r.Make( 'KVER=%(kvers)s '
                    'KERNEL_DIR=%(kdevel)s ' 
                    % r.macros, dir = '%(src)s' % r.macros)
            r.MakeInstall(
                    'KVER=%(kvers)s '
                    'KERNEL_DIR=%(kdevel)s '
                    'MODULE_DIR=%(kmoddir)s/parallel-tools ' 
                    % r.macros, dir = '%(src)s' % r.macros)
        
        r.ByDefault(exceptions=':supdoc')       
        r.KmodRequires(exceptions='.*')


